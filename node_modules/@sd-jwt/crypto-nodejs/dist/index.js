"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/index.ts
var src_exports = {};
__export(src_exports, {
  ES256: () => ES256,
  digest: () => digest,
  generateSalt: () => generateSalt
});
module.exports = __toCommonJS(src_exports);

// src/crypto.ts
var import_node_crypto = require("crypto");
var generateSalt = (length) => {
  if (length <= 0) {
    return "";
  }
  const saltBytes = (0, import_node_crypto.randomBytes)(length);
  const salt = saltBytes.toString("hex");
  return salt.substring(0, length);
};
var digest = (data, algorithm = "SHA-256") => {
  const nodeAlg = toNodeCryptoAlg(algorithm);
  const hash = (0, import_node_crypto.createHash)(nodeAlg);
  hash.update(data);
  const hashBuffer = hash.digest();
  return new Uint8Array(hashBuffer);
};
var toNodeCryptoAlg = (hashAlg) => hashAlg.replace("-", "").toLowerCase();
var ES256 = {
  alg: "ES256",
  generateKeyPair() {
    return __async(this, null, function* () {
      const keyPair = yield import_node_crypto.subtle.generateKey(
        {
          name: "ECDSA",
          namedCurve: "P-256"
          // ES256
        },
        true,
        // whether the key is extractable (i.e., can be used in exportKey)
        ["sign", "verify"]
        // can be used to sign and verify signatures
      );
      const publicKeyJWK = yield import_node_crypto.subtle.exportKey("jwk", keyPair.publicKey);
      const privateKeyJWK = yield import_node_crypto.subtle.exportKey("jwk", keyPair.privateKey);
      return { publicKey: publicKeyJWK, privateKey: privateKeyJWK };
    });
  },
  getSigner(privateKeyJWK) {
    return __async(this, null, function* () {
      const privateKey = yield import_node_crypto.subtle.importKey(
        "jwk",
        privateKeyJWK,
        {
          name: "ECDSA",
          namedCurve: "P-256"
          // Must match the curve used to generate the key
        },
        true,
        // whether the key is extractable (i.e., can be used in exportKey)
        ["sign"]
      );
      return (data) => __async(this, null, function* () {
        const encoder = new TextEncoder();
        const signature = yield import_node_crypto.subtle.sign(
          {
            name: "ECDSA",
            hash: { name: "SHA-256" }
            // Required for ES256
          },
          privateKey,
          encoder.encode(data)
        );
        return btoa(String.fromCharCode(...new Uint8Array(signature))).replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/, "");
      });
    });
  },
  getVerifier(publicKeyJWK) {
    return __async(this, null, function* () {
      const publicKey = yield import_node_crypto.subtle.importKey(
        "jwk",
        publicKeyJWK,
        {
          name: "ECDSA",
          namedCurve: "P-256"
          // Must match the curve used to generate the key
        },
        true,
        // whether the key is extractable (i.e., can be used in exportKey)
        ["verify"]
      );
      return (data, signatureBase64url) => __async(this, null, function* () {
        const encoder = new TextEncoder();
        const signature = Uint8Array.from(
          atob(signatureBase64url.replace(/-/g, "+").replace(/_/g, "/")),
          (c) => c.charCodeAt(0)
        );
        const isValid = yield import_node_crypto.subtle.verify(
          {
            name: "ECDSA",
            hash: { name: "SHA-256" }
            // Required for ES256
          },
          publicKey,
          signature,
          encoder.encode(data)
        );
        return isValid;
      });
    });
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ES256,
  digest,
  generateSalt
});
